# Generated by Django 3.2.25 on 2024-05-30 07:07

import datetime
import django.core.validators
from django.db import migrations, models


def forward_migrate_hydro(apps, _):
    hydrophone_model = apps.get_model("metadatax", "Hydrophone")
    for hydro in hydrophone_model.objects.all():
        hydro.model.max_bandwidth = hydro.max_bandwidth
        hydro.model.max_dynamic_range = hydro.max_dynamic_range
        hydro.model.max_operating_depth = hydro.max_operating_depth
        hydro.model.min_bandwidth = hydro.min_bandwidth
        hydro.model.min_dynamic_range = hydro.min_dynamic_range
        hydro.model.noise_floor = hydro.noise_floor
        hydro.model.save()
        hydro.save()


def reverse_migrate_hydro(apps, _):
    hydrophone_model = apps.get_model("metadatax", "Hydrophone")
    for hydro in hydrophone_model.objects.all():
        hydro.max_bandwidth = hydro.model.max_bandwidth
        hydro.max_dynamic_range = hydro.model.max_dynamic_range
        hydro.max_operating_depth = hydro.model.max_operating_depth
        hydro.min_bandwidth = hydro.model.min_bandwidth
        hydro.min_dynamic_range = hydro.model.min_dynamic_range
        hydro.noise_floor = hydro.model.noise_floor
        hydro.model.save()
        hydro.save()


class Migration(migrations.Migration):
    dependencies = [
        ("metadatax", "0017_auto_20240527_0943"),
    ]

    operations = [
        migrations.AddField(
            model_name="hydrophonemodel",
            name="max_bandwidth",
            field=models.FloatField(
                blank=True,
                help_text="Upper limiting frequency within a more or less flat response of the hydrophone, pre-amplification included if applicable.",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="hydrophonemodel",
            name="max_dynamic_range",
            field=models.FloatField(
                blank=True,
                help_text="Highest level which the hydrophone can handle (dB SPL RMS or peak), pre-amplification included if applicable.",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="hydrophonemodel",
            name="max_operating_depth",
            field=models.FloatField(
                blank=True,
                help_text="Maximum depth at which hydrophone operates (in positive meters).",
                null=True,
                validators=[django.core.validators.MinValueValidator(0)],
            ),
        ),
        migrations.AddField(
            model_name="hydrophonemodel",
            name="min_bandwidth",
            field=models.FloatField(
                blank=True,
                help_text="Lower limiting frequency for a more or less flat response of the hydrophone, pre-amplification included if applicable.",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="hydrophonemodel",
            name="min_dynamic_range",
            field=models.FloatField(
                blank=True,
                help_text="Lowest level which the hydrophone can handle (dB SPL RMS or peak), pre-amplification included if applicable.",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="hydrophonemodel",
            name="noise_floor",
            field=models.FloatField(
                blank=True,
                help_text="Self noise of the hydrophone (dB re 1ÂµPa^2/Hz), pre-amplification included if applicable.<br>Average on bandwidth or a fix frequency (generally @5kHz for example). Possibility to 'below sea-state zero' (equivalent to around 30dB @5kHz) could be nice because it is often described like that.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="deployment",
            name="deployment_date",
            field=models.DateTimeField(
                blank=True,
                default=datetime.datetime(1970, 1, 1, 0, 0),
                help_text="Date and time at which the measurement system was deployed in UTC.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="deployment",
            name="recovery_date",
            field=models.DateTimeField(
                blank=True,
                default=datetime.datetime(1970, 1, 1, 0, 0),
                help_text="Date and time at which the measurement system was recovered in UTC.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="platform",
            name="name",
            field=models.CharField(
                blank=True,
                help_text="Name of the specific support of the deployed instruments",
                max_length=255,
                null=True,
            ),
        ),
        # Additional logical migration
        migrations.RunPython(
            code=forward_migrate_hydro, reverse_code=reverse_migrate_hydro
        ),
        migrations.RemoveField(
            model_name="hydrophone",
            name="max_bandwidth",
        ),
        migrations.RemoveField(
            model_name="hydrophone",
            name="max_dynamic_range",
        ),
        migrations.RemoveField(
            model_name="hydrophone",
            name="max_operating_depth",
        ),
        migrations.RemoveField(
            model_name="hydrophone",
            name="min_bandwidth",
        ),
        migrations.RemoveField(
            model_name="hydrophone",
            name="min_dynamic_range",
        ),
        migrations.RemoveField(
            model_name="hydrophone",
            name="noise_floor",
        ),
    ]
