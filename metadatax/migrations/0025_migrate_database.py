# Generated by Django 3.2.25 on 2025-06-25 09:10

from django.db import migrations

from metadatax.common.models import ContactRole


class MigrationAction:
    def __init__(self, apps, _):
        self.unknown_format_id = None
        self.apps = apps

        self.Contact = apps.get_model("common", "Contact")
        self.ContactRole = apps.get_model("common", "ContactRole")
        self.Institution = apps.get_model("common", "Institution")
        self.migration_institution, _ = self.Institution.objects.get_or_create(
            name="[Migration]"
        )

        self.ProjectType = apps.get_model("acquisition", "ProjectType")
        self.Project = apps.get_model("acquisition", "Project")
        self.ProjectContactThrough = self.Project.contacts.through
        self.Site = apps.get_model("acquisition", "Site")
        self.Campaign = apps.get_model("acquisition", "Campaign")
        self.Deployment = apps.get_model("acquisition", "Deployment")
        self.DeploymentContactThrough = self.Deployment.contacts.through
        self.ChannelConfiguration = apps.get_model(
            "acquisition", "ChannelConfiguration"
        )
        self.ChannelConfigurationRecorderSpecification = apps.get_model(
            "acquisition", "ChannelConfigurationRecorderSpecification"
        )
        self.ChannelConfigurationRecorderSpecificationFormatThrough = (
            self.ChannelConfigurationRecorderSpecification.recording_formats.through
        )
        self.DeploymentMobilePosition = apps.get_model(
            "acquisition", "DeploymentMobilePosition"
        )
        self.ChannelConfigurationFiles = apps.get_model(
            "acquisition", "ChannelConfigurationFiles"
        )

        self.PlatformType = apps.get_model("equipment", "PlatformType")
        self.Platform = apps.get_model("equipment", "Platform")
        self.Equipment = apps.get_model("equipment", "Equipment")
        self.RecorderSpecification = apps.get_model(
            "equipment", "RecorderSpecification"
        )
        self.HydrophoneSpecification = apps.get_model(
            "equipment", "HydrophoneSpecification"
        )

        self.FileFormat = apps.get_model("data", "FileFormat")
        self.File = apps.get_model("data", "File")
        self.AudioProperties = apps.get_model("data", "AudioProperties")

        for recorder in apps.get_model("metadatax", "Recorder").objects.all():
            self.migrate_old_recorder(recorder)
        for hydrophone in apps.get_model("metadatax", "Hydrophone").objects.all():
            self.migrate_old_hydrophone(hydrophone)
        for platform in apps.get_model("metadatax", "Platform").objects.all():
            self.migrate_old_platform(platform)
        self.run_migration(apps.get_model("metadatax", "Project").objects.all())

    def run_migration(self, old_projects):
        self.migrate_projects(old_projects=old_projects)
        self.migrate_project_types(old_projects=old_projects)
        self.migrate_sites(old_projects=old_projects)
        self.migrate_campaigns(old_projects=old_projects)
        self.migrate_deployments(old_projects=old_projects)
        self.migrate_channel_configurations(old_projects=old_projects)
        self.migrate_file_formats(old_projects=old_projects)
        self.migrate_channel_configuration_recorder_specification(
            old_projects=old_projects
        )
        self.migrate_channel_configuration_recorder_specifications_format_through(
            old_projects=old_projects
        )
        self.migrate_project_contact_roles(old_projects=old_projects)
        self.migrate_deployment_contact_roles(old_projects=old_projects)
        self.migrate_deployment_mobile_positions(old_projects=old_projects)
        self.migrate_files(old_projects=old_projects)
        self.migrate_audio_properties(old_projects=old_projects)
        self.migrate_channel_configuration_files(old_projects=old_projects)

    def migrate_projects(self, old_projects):
        self.Project.objects.bulk_create(
            [
                self.Project(
                    id=project.id,
                    name=project.name,
                    accessibility=project.accessibility,
                    doi=project.doi,
                    project_type_id=project.project_type_id,
                    project_goal=project.project_goal,
                )
                for project in old_projects
            ]
        )

    def migrate_project_types(self, old_projects):
        self.ProjectType.objects.bulk_create(
            [
                self.ProjectType(
                    id=project.project_type.id,
                    name=project.project_type.name,
                )
                for project in old_projects
                if project.project_type is not None
            ],
            ignore_conflicts=True,
        )

    def migrate_sites(self, old_projects):
        self.Site.objects.bulk_create(
            [
                self.Site(id=site.id, name=site.name, project_id=project.id)
                for project in old_projects
                for site in project.sites.all()
            ],
            ignore_conflicts=True,
        )

    def migrate_campaigns(self, old_projects):
        self.Campaign.objects.bulk_create(
            [
                self.Campaign(id=campaign.id, name=campaign.name, project_id=project.id)
                for project in old_projects
                for campaign in project.campaigns.all()
            ],
            ignore_conflicts=True,
        )

    def migrate_deployments(self, old_projects):
        self.Deployment.objects.bulk_create(
            [
                self.Deployment(
                    id=deployment.id,
                    project_id=project.id,
                    longitude=deployment.longitude,
                    latitude=deployment.latitude,
                    name=deployment.name,
                    bathymetric_depth=deployment.bathymetric_depth,
                    deployment_date=deployment.deployment_date,
                    deployment_vessel=deployment.deployment_vessel,
                    recovery_date=deployment.recovery_date,
                    recovery_vessel=deployment.recovery_vessel,
                    description=deployment.description,
                    site_id=deployment.site_id,
                    campaign_id=deployment.campaign_id,
                    platform=self.Platform.objects.get(
                        name=deployment.platform.name,
                        type__name=deployment.platform.type.name,
                    )
                    if deployment.platform is not None
                    else None,
                )
                for project in old_projects
                for deployment in project.deployments.all()
            ]
        )

    def migrate_channel_configurations(self, old_projects):
        self.ChannelConfiguration.objects.bulk_create(
            [
                self.ChannelConfiguration(
                    id=channel.id,
                    deployment_id=deployment.id,
                    recorder_specification_id=channel.id,
                    continuous=channel.continuous,
                    duty_cycle_on=channel.duty_cycle_on,
                    duty_cycle_off=channel.duty_cycle_off,
                    instrument_depth=channel.hydrophone_depth,
                    harvest_starting_date=channel.harvest_starting_date,
                    harvest_ending_date=channel.harvest_ending_date,
                )
                for project in old_projects
                for deployment in project.deployments.all()
                for channel in deployment.channelconfiguration_set.all()
            ]
        )

    def migrate_channel_configuration_recorder_specification(self, old_projects):
        self.ChannelConfigurationRecorderSpecification.objects.bulk_create(
            [
                self.ChannelConfigurationRecorderSpecification(
                    id=channel.id,
                    recorder=self.Equipment.objects.get(
                        provider__name=channel.recorder.model.provider.name,
                        model=channel.recorder.model.name,
                        serial_number=channel.recorder.serial_number,
                    ),
                    hydrophone=self.Equipment.objects.get(
                        provider__name=channel.hydrophone.model.provider.name,
                        model=channel.hydrophone.model.name,
                        serial_number=channel.hydrophone.serial_number,
                    ),
                    sampling_frequency=channel.sampling_frequency,
                    sample_depth=channel.sample_depth,
                    gain=channel.gain,
                    channel_name=channel.channel_name,
                )
                for project in old_projects
                for deployment in project.deployments.all()
                for channel in deployment.channelconfiguration_set.all()
            ]
        )

    def migrate_channel_configuration_recorder_specifications_format_through(
        self, old_projects
    ):
        self.ChannelConfigurationRecorderSpecificationFormatThrough.objects.bulk_create(
            [
                self.ChannelConfigurationRecorderSpecificationFormatThrough(
                    channelconfigurationrecorderspecification_id=channel.id,
                    fileformat_id=channel.recording_format_id,
                )
                for project in old_projects
                for deployment in project.deployments.all()
                for channel in deployment.channelconfiguration_set.all()
            ]
        )

    def migrate_project_contact_roles(self, old_projects):
        project_contacts = []
        for project in old_projects:
            for relation in project.responsible_parties.through.objects.filter(
                project_id=project.id
            ):
                contact, _ = self.Contact.objects.get_or_create(
                    name=relation.institution.name,
                    mail=relation.institution.contact,
                    website=relation.institution.website,
                )
                contact_role, _ = self.ContactRole.objects.get_or_create(
                    contact=contact,
                    role=ContactRole.Type.MAIN_CONTACT,
                )
                project_contacts.append(
                    self.ProjectContactThrough(
                        id=relation.id,
                        project_id=relation.project_id,
                        contactrole=contact_role,
                    )
                )
        self.ProjectContactThrough.objects.bulk_create(project_contacts)

    def migrate_deployment_contact_roles(self, old_projects):
        deployment_contacts = []
        for project in old_projects:
            for deployment in project.deployments.all():
                if deployment.provider is None:
                    continue
                contact, _ = self.Contact.objects.get_or_create(
                    name=deployment.provider.name,
                    mail=deployment.provider.contact,
                    website=deployment.provider.website,
                )
                contact_role, _ = self.ContactRole.objects.get_or_create(
                    contact=contact,
                    role=ContactRole.Type.CONTACT_POINT,
                )
                deployment_contacts.append(
                    self.DeploymentContactThrough(
                        deployment_id=deployment.id,
                        contactrole=contact_role,
                    )
                )
        self.DeploymentContactThrough.objects.bulk_create(deployment_contacts)

    def migrate_deployment_mobile_positions(self, old_projects):
        self.DeploymentMobilePosition.objects.bulk_create(
            [
                self.DeploymentMobilePosition(
                    id=mobile.id,
                    deployment_id=deployment.id,
                    datetime=mobile.datetime,
                    longitude=mobile.longitude,
                    latitude=mobile.latitude,
                    depth=mobile.hydrophone_depth,
                    heading=mobile.heading,
                    pitch=mobile.pitch,
                    roll=mobile.roll,
                )
                for project in old_projects
                for deployment in project.deployments.all()
                for mobile in deployment.mobileplatform_set.all()
            ]
        )

    def migrate_file_formats(self, old_projects):
        self.FileFormat.objects.bulk_create(
            [
                *[
                    self.FileFormat(
                        id=file.format.id,
                        name=file.format.name,
                    )
                    for project in old_projects
                    for deployment in project.deployments.all()
                    for channel in deployment.channelconfiguration_set.all()
                    for file in channel.file_set.all()
                ],
                *[
                    self.FileFormat(
                        id=channel.recording_format.id,
                        name=channel.recording_format.name,
                    )
                    for project in old_projects
                    for deployment in project.deployments.all()
                    for channel in deployment.channelconfiguration_set.all()
                ],
            ],
            ignore_conflicts=True,
        )
        is_unknown = (
            len(
                [
                    True
                    for project in old_projects
                    for deployment in project.deployments.all()
                    for channel in deployment.channelconfiguration_set.all()
                    for file in channel.file_set.all()
                    if file.format is None
                ]
            )
            > 0
        )
        if is_unknown:
            unknown_format, _ = self.FileFormat.objects.get_or_create(name="[Unknown]")
            self.unknown_format_id = unknown_format.id

    def migrate_files(self, old_projects):
        self.File.objects.bulk_create(
            [
                self.File(
                    id=file.id,
                    filename=file.name,
                    format_id=file.format_id
                    if file.format_id is not None
                    else self.unknown_format_id,
                    audio_properties_id=file.id,
                    storage_location=file.storage_location,
                    file_size=file.file_size,
                    accessibility=file.accessibility,
                )
                for project in old_projects
                for deployment in project.deployments.all()
                for channel in deployment.channelconfiguration_set.all()
                for file in channel.file_set.all()
            ]
        )

    def migrate_audio_properties(self, old_projects):
        self.AudioProperties.objects.bulk_create(
            [
                self.AudioProperties(
                    id=file.id,
                    sampling_frequency=file.sampling_frequency,
                    initial_timestamp=file.initial_timestamp,
                    duration=file.duration,
                    sample_depth=file.sample_depth,
                )
                for project in old_projects
                for deployment in project.deployments.all()
                for channel in deployment.channelconfiguration_set.all()
                for file in channel.file_set.all()
            ]
        )

    def migrate_channel_configuration_files(self, old_projects):
        self.ChannelConfigurationFiles.objects.bulk_create(
            [
                self.ChannelConfigurationFiles(
                    channel_configuration_id=channel.id,
                    file_id=file.id,
                )
                for project in old_projects
                for deployment in project.deployments.all()
                for channel in deployment.channelconfiguration_set.all()
                for file in channel.file_set.all()
            ]
        )

    def migrate_equipment(self, old_projects):
        all_channels = [
            channel
            for project in old_projects
            for deployment in project.deployments.all()
            for channel in deployment.channelconfiguration_set.all()
        ]
        for channel in all_channels:
            self.migrate_old_recorder(channel.recorder)
            self.migrate_old_hydrophone(channel.hydrophone)

    def migrate_old_recorder(self, old_recorder):
        recorder_provider, _ = self.Institution.objects.get_or_create(
            name=old_recorder.model.provider.name,
            mail=old_recorder.model.provider.contact,
            website=old_recorder.model.provider.website,
        )
        recorder_equipment, is_new = self.Equipment.objects.get_or_create(
            model=old_recorder.model.name,
            serial_number=old_recorder.serial_number,
            owner=self.migration_institution,
            provider=recorder_provider,
            name=old_recorder.name,
        )
        if is_new or recorder_equipment.recorder_specification is None:
            recorder_equipment.recorder_specification = (
                self.RecorderSpecification.objects.create(
                    channels_count=old_recorder.model.number_of_channels,
                )
            )
            recorder_equipment.save()

    def migrate_old_hydrophone(self, old_hydrophone):
        hydrophone_provider, _ = self.Institution.objects.get_or_create(
            name=old_hydrophone.model.provider.name,
            mail=old_hydrophone.model.provider.contact,
            website=old_hydrophone.model.provider.website,
        )
        hydrophone_equipment, is_new = self.Equipment.objects.get_or_create(
            model=old_hydrophone.model.name,
            serial_number=old_hydrophone.serial_number,
            owner=self.migration_institution,
            provider=hydrophone_provider,
        )
        if is_new or hydrophone_equipment.hydrophone_specification is None:
            hydrophone_equipment.hydrophone_specification = self.HydrophoneSpecification.objects.create(
                sensitivity=old_hydrophone.sensitivity,
                directivity=old_hydrophone.model.directivity,
                operating_min_temperature=old_hydrophone.model.operating_min_temperature,
                operating_max_temperature=old_hydrophone.model.operating_max_temperature,
                min_bandwidth=old_hydrophone.model.min_bandwidth,
                max_bandwidth=old_hydrophone.model.max_bandwidth,
                min_dynamic_range=old_hydrophone.model.min_dynamic_range,
                max_dynamic_range=old_hydrophone.model.max_dynamic_range,
                max_operating_depth=old_hydrophone.model.max_operating_depth,
                noise_floor=old_hydrophone.model.noise_floor,
            )
            hydrophone_equipment.save()

    def migrate_old_platform(self, old_platform):
        type, _ = self.PlatformType.objects.get_or_create(
            name=old_platform.type.name,
            is_mobile=old_platform.type.type == "M",
        )
        platform, _ = self.Platform.objects.get_or_create(
            owner=self.migration_institution,
            provider=self.migration_institution,
            name=old_platform.name,
            description=old_platform.description,
            type=type,
        )
        return platform


class Migration(migrations.Migration):
    dependencies = [
        ("metadatax", "0024_channelconfiguration_harvesttime"),
        ("common", "0001_initial"),
        ("acquisition", "0002_initial"),
        ("equipment", "0001_initial"),
        ("data", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(MigrationAction, migrations.RunPython.noop),
    ]
