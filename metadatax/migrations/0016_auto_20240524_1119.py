# Generated by Django 3.2.25 on 2024-05-24 09:19

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


def populate_default_types(apps, _):
    project_type_model = apps.get_model("metadatax", "ProjectType")
    project_type_model.objects.get_or_create(name="research")
    project_type_model.objects.get_or_create(name="marine renewable energies")
    project_type_model.objects.get_or_create(name="long monitoring")

    platform_type_model = apps.get_model("metadatax", "PlatformType")
    platform_type_model.objects.get_or_create(name="subsurface buoy")
    platform_type_model.objects.get_or_create(name="cage")
    platform_type_model.objects.get_or_create(name="mooring line with acoustic release")
    platform_type_model.objects.get_or_create(name="fishing net")
    platform_type_model.objects.get_or_create(name="glider")
    platform_type_model.objects.get_or_create(name="animal tag")

    file_format_model = apps.get_model("metadatax", "FileFormat")
    file_format_model.objects.get_or_create(name="wav")
    file_format_model.objects.get_or_create(name="flac")


class Migration(migrations.Migration):
    dependencies = [
        ("metadatax", "0015_auto_20240523_1655"),
    ]

    operations = [
        migrations.RenameField(
            model_name="file",
            old_name="bit_counts",
            new_name="file_size",
        ),
        migrations.AlterField(
            model_name="file",
            name="file_size",
            field=models.BigIntegerField(
                blank=True,
                help_text="Total number of bytes of the audio file (in bytes).",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="campaign",
            name="name",
            field=models.CharField(
                help_text="Name of the campaign during which the instrument was deployed.",
                max_length=255,
            ),
        ),
        migrations.AlterField(
            model_name="campaign",
            name="project",
            field=models.ForeignKey(
                help_text="Project associated to this campaign",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="campaigns",
                to="metadatax.project",
            ),
        ),
        migrations.AlterField(
            model_name="channelconfiguration",
            name="channel_name",
            field=models.CharField(
                blank=True,
                default="A",
                help_text="Name of the channel used for recording.",
                max_length=5,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="channelconfiguration",
            name="continuous",
            field=models.BooleanField(
                blank=True,
                help_text="Boolean indicating if the record is continuous (1) or has a duty cycle (0).",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="channelconfiguration",
            name="duty_cycle_off",
            field=models.IntegerField(
                blank=True,
                help_text="If its not Continuous, time length (in second) during which the recorder is off.",
                null=True,
                validators=[django.core.validators.MinValueValidator(0)],
            ),
        ),
        migrations.AlterField(
            model_name="channelconfiguration",
            name="duty_cycle_on",
            field=models.IntegerField(
                blank=True,
                help_text="If its not Continuous, time length (in second) during which the recorder is on.",
                null=True,
                validators=[django.core.validators.MinValueValidator(0)],
            ),
        ),
        migrations.AlterField(
            model_name="channelconfiguration",
            name="gain",
            field=models.FloatField(
                help_text="Gain of the channel (recorder), with correction factors if applicable, without hydrophone sensibility (in dB). If end-to-end calibration with hydrophone sensibility, set it in Sensitivity and set Gain to 0 dB.<br>Gain G of the channel such that : data(uPa) = data(volt)*10^((-Sh-G)/20). See Sensitivity for Sh definition."
            ),
        ),
        migrations.AlterField(
            model_name="channelconfiguration",
            name="hydrophone_depth",
            field=models.IntegerField(
                blank=True,
                help_text="Immersion depth of hydrophone (in positive meters).",
                null=True,
                validators=[django.core.validators.MinValueValidator(0)],
            ),
        ),
        migrations.AlterField(
            model_name="channelconfiguration",
            name="recording_format",
            field=models.ForeignKey(
                blank=True,
                help_text="Format of the recorded files",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="metadatax.fileformat",
            ),
        ),
        migrations.AlterField(
            model_name="channelconfiguration",
            name="sample_depth",
            field=models.IntegerField(
                help_text="Number of quantization bits used to represent each sample by the recorder channel (in bits).",
                validators=[django.core.validators.MinValueValidator(0)],
            ),
        ),
        migrations.AlterField(
            model_name="channelconfiguration",
            name="sampling_frequency",
            field=models.IntegerField(
                help_text="Sampling frequency of the recording channel (in Hertz).",
                validators=[django.core.validators.MinValueValidator(0)],
            ),
        ),
        migrations.AlterField(
            model_name="deployment",
            name="bathymetric_depth",
            field=models.IntegerField(
                blank=True,
                help_text="Underwater depth of ocean floor at the platform position (in positive meters).",
                null=True,
                validators=[django.core.validators.MinValueValidator(0)],
            ),
        ),
        migrations.AlterField(
            model_name="deployment",
            name="campaign",
            field=models.ForeignKey(
                blank=True,
                help_text="Campaign during which the instrument was deployed.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="deployments",
                to="metadatax.campaign",
            ),
        ),
        migrations.AlterField(
            model_name="deployment",
            name="deployment_date",
            field=models.DateTimeField(
                blank=True,
                help_text="Date and time at which the measurement system was deployed in UTC.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="deployment",
            name="deployment_vessel",
            field=models.CharField(
                blank=True,
                help_text="Name of the vehicle associated with the deployment.",
                max_length=255,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="deployment",
            name="description",
            field=models.TextField(
                blank=True,
                help_text="Optional description of deployment and recovery conditions (weather, technical issues,...).",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="deployment",
            name="latitude",
            field=models.FloatField(
                help_text="Latitude of the platform position (WGS84 decimal degrees)."
            ),
        ),
        migrations.AlterField(
            model_name="deployment",
            name="longitude",
            field=models.FloatField(
                help_text="Longitude of the platform position (WGS84 decimal degree)."
            ),
        ),
        migrations.AlterField(
            model_name="deployment",
            name="name",
            field=models.CharField(
                blank=True,
                help_text="Name of the deployment.",
                max_length=255,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="deployment",
            name="platform",
            field=models.ForeignKey(
                blank=True,
                help_text="Support of the deployed instruments",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="deployments",
                to="metadatax.platform",
            ),
        ),
        migrations.AlterField(
            model_name="deployment",
            name="project",
            field=models.ForeignKey(
                help_text="Project associated to this deployment",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="deployments",
                to="metadatax.project",
            ),
        ),
        migrations.AlterField(
            model_name="deployment",
            name="provider",
            field=models.ForeignKey(
                blank=True,
                help_text="Name of the institution that deployed the instrument and collected the data.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="deployments",
                to="metadatax.institution",
            ),
        ),
        migrations.AlterField(
            model_name="deployment",
            name="recovery_date",
            field=models.DateTimeField(
                blank=True,
                help_text="Date and time at which the measurement system was recovered in UTC.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="deployment",
            name="recovery_vessel",
            field=models.CharField(
                blank=True,
                help_text="Name of the vehicle associated with the recovery.",
                max_length=255,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="deployment",
            name="site",
            field=models.ForeignKey(
                blank=True,
                help_text="Conceptual location. A site may group together several platforms in relatively close proximity, or describes a location where regular deployments are carried out.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="deployments",
                to="metadatax.site",
            ),
        ),
        migrations.AlterField(
            model_name="equipmentprovider",
            name="contact",
            field=models.EmailField(
                blank=True,
                help_text="Contact email of the manufacturer",
                max_length=254,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="equipmentprovider",
            name="name",
            field=models.CharField(
                help_text="Name of the manufacturer", max_length=255, unique=True
            ),
        ),
        migrations.AlterField(
            model_name="equipmentprovider",
            name="website",
            field=models.URLField(
                blank=True, help_text="Website of the manufacturer", null=True
            ),
        ),
        migrations.AlterField(
            model_name="file",
            name="accessibility",
            field=models.TextField(
                blank=True,
                choices=[
                    ("C", "Confidential"),
                    ("R", "Upon request"),
                    ("O", "Open access"),
                ],
                default="R",
                help_text="Accessibility level of the data. If the availability is not sure or non-uniform within the audio file, the default value is upon request.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="file",
            name="channel_configuration",
            field=models.ForeignKey(
                help_text="Channel configuration related to this file",
                on_delete=django.db.models.deletion.CASCADE,
                to="metadatax.channelconfiguration",
            ),
        ),
        migrations.AlterField(
            model_name="file",
            name="duration",
            field=models.IntegerField(
                blank=True,
                help_text="Duration of the audio file (in seconds).",
                null=True,
                validators=[django.core.validators.MinValueValidator(0)],
            ),
        ),
        migrations.AlterField(
            model_name="file",
            name="format",
            field=models.ForeignKey(
                blank=True,
                help_text="Format of the audio file.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="metadatax.fileformat",
            ),
        ),
        migrations.AlterField(
            model_name="file",
            name="initial_timestamp",
            field=models.DateTimeField(
                blank=True,
                help_text="Date and time of the audio file start (in UTC).",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="file",
            name="name",
            field=models.CharField(
                help_text="Name of the audio file, with extension.", max_length=255
            ),
        ),
        migrations.AlterField(
            model_name="file",
            name="sample_depth",
            field=models.IntegerField(
                blank=True,
                help_text="Number of quantization bits used to represent each sample (in bits). If it is different from the channel sampling frequency, re-quantization has been performed.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="file",
            name="sampling_frequency",
            field=models.IntegerField(
                help_text="Sampling frequency of the audio file (in Hertz). If it is different from the channel sampling frequency, resampling has been performed."
            ),
        ),
        migrations.AlterField(
            model_name="file",
            name="storage_location",
            field=models.TextField(
                blank=True,
                help_text="Description of the path to access the data.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="fileformat",
            name="name",
            field=models.CharField(
                help_text="Format of the audio file (eg: wav, flac...)", max_length=20
            ),
        ),
        migrations.AlterField(
            model_name="hydrophone",
            name="max_bandwidth",
            field=models.FloatField(
                blank=True,
                help_text="Upper limiting frequency within a more or less flat response of the hydrophone, pre-amplification included if applicable.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="hydrophone",
            name="max_dynamic_range",
            field=models.FloatField(
                blank=True,
                help_text="Highest level which the hydrophone can handle (dB SPL RMS or peak), pre-amplification included if applicable.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="hydrophone",
            name="max_operating_depth",
            field=models.FloatField(
                blank=True,
                help_text="Maximum depth at which hydrophone operates (in positive meters).",
                null=True,
                validators=[django.core.validators.MinValueValidator(0)],
            ),
        ),
        migrations.AlterField(
            model_name="hydrophone",
            name="min_bandwidth",
            field=models.FloatField(
                blank=True,
                help_text="Lower limiting frequency for a more or less flat response of the hydrophone, pre-amplification included if applicable.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="hydrophone",
            name="min_dynamic_range",
            field=models.FloatField(
                blank=True,
                help_text="Lowest level which the hydrophone can handle (dB SPL RMS or peak), pre-amplification included if applicable.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="hydrophone",
            name="model",
            field=models.ForeignKey(
                help_text="Model of the hydrophone",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="hydrophone_items",
                to="metadatax.hydrophonemodel",
            ),
        ),
        migrations.AlterField(
            model_name="hydrophone",
            name="noise_floor",
            field=models.FloatField(
                blank=True,
                help_text="Self noise of the hydrophone (dB re 1µPa^2/Hz), pre-amplification included if applicable.<br>Average on bandwidth or a fix frequency (generally @5kHz for example). Possibility to 'below sea-state zero' (equivalent to around 30dB @5kHz) could be nice because it is often described like that.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="hydrophone",
            name="sensitivity",
            field=models.FloatField(
                help_text="Average sensitivity of the hydrophone (dB re 1V/µPa), pre-amplification included if applicable. Sensitivity Sh of the hydrophone such that : data(uPa) = data(volt)*10^((-Sh-G)/20). See Recorder Gain for definition of G."
            ),
        ),
        migrations.AlterField(
            model_name="hydrophone",
            name="serial_number",
            field=models.CharField(
                help_text="Serial number of the hydrophone", max_length=255
            ),
        ),
        migrations.AlterField(
            model_name="hydrophonemodel",
            name="directivity",
            field=models.TextField(
                blank=True,
                choices=[
                    ("OMNI", "Omni-directional"),
                    ("BI", "Bi-directional"),
                    ("UNI", "Uni-directional"),
                    ("CAR", "Cardioid"),
                    ("SCAR", "Supercardioid"),
                ],
                help_text="Directivity of the hydrophone",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="hydrophonemodel",
            name="name",
            field=models.CharField(
                help_text="Name of the hydrophone model.", max_length=255
            ),
        ),
        migrations.AlterField(
            model_name="hydrophonemodel",
            name="operating_max_temperature",
            field=models.FloatField(
                blank=True,
                help_text="Maximal temperature where the hydrophone operates (in degree Celsius)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="hydrophonemodel",
            name="operating_min_temperature",
            field=models.FloatField(
                blank=True,
                help_text="Minimal temperature where the hydrophone operates (in degree Celsius)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="hydrophonemodel",
            name="provider",
            field=models.ForeignKey(
                help_text="Hydrophone manufacturer.",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="hydrophone_models",
                to="metadatax.equipmentprovider",
            ),
        ),
        migrations.AlterField(
            model_name="institution",
            name="contact",
            field=models.EmailField(
                help_text="Generic and permanent email address", max_length=254
            ),
        ),
        migrations.AlterField(
            model_name="institution",
            name="name",
            field=models.CharField(
                help_text='Name of the institutions involved in the data collection and processing. It is based on the SeaDataNet list (<a href="https://edmo.seadatanet.org/search" target="_blank">https://edmo.seadatanet.org/search</a>), but an unlisted institution can be added if required.',
                max_length=255,
                unique=True,
            ),
        ),
        migrations.AlterField(
            model_name="institution",
            name="website",
            field=models.URLField(
                blank=True,
                help_text="If exists, the website URL of the institution",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="platform",
            name="description",
            field=models.TextField(
                blank=True, help_text="Optional description of the platform.", null=True
            ),
        ),
        migrations.AlterField(
            model_name="platform",
            name="name",
            field=models.CharField(
                help_text="Name of the specific support of the deployed instruments",
                max_length=255,
            ),
        ),
        migrations.AlterField(
            model_name="platform",
            name="type",
            field=models.ForeignKey(
                blank=True,
                help_text="Generic type of support",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="platforms",
                to="metadatax.platformtype",
            ),
        ),
        migrations.AlterField(
            model_name="platformtype",
            name="name",
            field=models.CharField(
                help_text="Generic name of the support of the deployed instruments (subsurface buoy, cage, mooring line with acoustic release, fishing net, glider, animal tag,...).",
                max_length=255,
                unique=True,
            ),
        ),
        migrations.AlterField(
            model_name="project",
            name="accessibility",
            field=models.TextField(
                blank=True,
                choices=[
                    ("C", "Confidential"),
                    ("R", "Upon request"),
                    ("O", "Open access"),
                ],
                default="R",
                help_text="Accessibility level of the data. If the availability is not sure or non-uniform within the project, the default value is upon request.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="project",
            name="doi",
            field=models.CharField(
                blank=True,
                help_text="Digital Object Identifier of the data, if existing.",
                max_length=255,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="project",
            name="name",
            field=models.CharField(help_text="Name of the project", max_length=255),
        ),
        migrations.AlterField(
            model_name="project",
            name="project_goal",
            field=models.TextField(
                blank=True,
                help_text="Description of the goal of the project.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="project",
            name="project_type",
            field=models.ForeignKey(
                blank=True,
                help_text="Description of the type of the project (e.g., research, marine renewable energies, long monitoring,...).",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="projects",
                to="metadatax.projecttype",
            ),
        ),
        migrations.AlterField(
            model_name="project",
            name="responsible_parties",
            field=models.ManyToManyField(
                help_text="Name of the institutions involved in the data collection and processing within the project.",
                related_name="projects",
                to="metadatax.Institution",
            ),
        ),
        migrations.AlterField(
            model_name="projecttype",
            name="name",
            field=models.CharField(
                help_text="Description of the type of the project (e.g., research, marine renewable energies, long monitoring,...).",
                max_length=255,
                unique=True,
            ),
        ),
        migrations.AlterField(
            model_name="recorder",
            name="model",
            field=models.ForeignKey(
                help_text="Model of the recorder",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="recorder_items",
                to="metadatax.recordermodel",
            ),
        ),
        migrations.AlterField(
            model_name="recorder",
            name="serial_number",
            field=models.CharField(
                help_text="Serial number of the recorder", max_length=255
            ),
        ),
        migrations.AlterField(
            model_name="recordermodel",
            name="name",
            field=models.CharField(
                help_text="Name of the recorder model.", max_length=255
            ),
        ),
        migrations.AlterField(
            model_name="recordermodel",
            name="number_of_channels",
            field=models.IntegerField(
                blank=True,
                help_text="Number of all the channels on the recorder, even if unused.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="recordermodel",
            name="provider",
            field=models.ForeignKey(
                help_text="Recorder manufacturer.",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="recorder_models",
                to="metadatax.equipmentprovider",
            ),
        ),
        migrations.AlterField(
            model_name="site",
            name="name",
            field=models.CharField(
                help_text="Name of the platform conceptual location. A site may group together several platforms in relatively close proximity, or describes a location where regular deployments are carried out.",
                max_length=255,
            ),
        ),
        migrations.AlterField(
            model_name="site",
            name="project",
            field=models.ForeignKey(
                help_text="Project associated to this site",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="sites",
                to="metadatax.project",
            ),
        ),
        migrations.RunPython(code=populate_default_types),
    ]
