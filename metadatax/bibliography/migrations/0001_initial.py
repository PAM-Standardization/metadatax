# Generated by Django 3.2.25 on 2025-07-03 07:16

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("common", "0003_institution"),
    ]

    operations = [
        migrations.CreateModel(
            name="BibliographyArticle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "journal",
                    models.CharField(
                        help_text="Required for an article", max_length=255
                    ),
                ),
                ("volumes", models.CharField(blank=True, max_length=255, null=True)),
                ("pages_from", models.PositiveIntegerField(blank=True, null=True)),
                ("pages_to", models.PositiveIntegerField(blank=True, null=True)),
                ("issue_nb", models.PositiveIntegerField(blank=True, null=True)),
                ("article_nb", models.PositiveIntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="BibliographyConference",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "conference_name",
                    models.CharField(
                        help_text="Required for a conference", max_length=255
                    ),
                ),
                (
                    "conference_location",
                    models.CharField(
                        help_text="Required for a conference (format: {City}, {Country})",
                        max_length=255,
                    ),
                ),
                (
                    "conference_abstract_book_url",
                    models.URLField(blank=True, null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="BibliographyPoster",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("poster_url", models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="BibliographySoftware",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "publication_place",
                    models.CharField(
                        help_text="Required for a software", max_length=255
                    ),
                ),
                ("repository_url", models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name="Bibliography",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                (
                    "doi",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("U", "Upcoming"), ("P", "Published")], max_length=1
                    ),
                ),
                (
                    "publication_date",
                    models.DateField(
                        blank=True,
                        help_text="Required for any published bibliography",
                        null=True,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("S", "Software"),
                            ("A", "Article"),
                            ("C", "Conference"),
                            ("P", "Poster"),
                        ],
                        max_length=1,
                    ),
                ),
                (
                    "article_information",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="bibliography",
                        to="bibliography.bibliographyarticle",
                    ),
                ),
                (
                    "conference_information",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="bibliography",
                        to="bibliography.bibliographyconference",
                    ),
                ),
                (
                    "poster_information",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="bibliography",
                        to="bibliography.bibliographyposter",
                    ),
                ),
                (
                    "software_information",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="bibliography",
                        to="bibliography.bibliographysoftware",
                    ),
                ),
                ("tags", models.ManyToManyField(blank=True, to="bibliography.Tag")),
            ],
            options={
                "verbose_name_plural": "Bibliography",
            },
        ),
        migrations.CreateModel(
            name="Author",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order", models.PositiveIntegerField()),
                (
                    "bibliography",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="authors",
                        to="bibliography.bibliography",
                    ),
                ),
                (
                    "contact",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="authors",
                        to="common.contact",
                    ),
                ),
                (
                    "institutions",
                    models.ManyToManyField(
                        blank=True,
                        related_name="bibliography_authors",
                        to="common.Institution",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="bibliography",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("publication_date__isnull", False), ("status", "P")),
                    models.Q(("status", "P"), _negated=True),
                    _connector="OR",
                ),
                name="Published bibliography has a publication date",
            ),
        ),
        migrations.AddConstraint(
            model_name="bibliography",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        models.Q(("type", "A"), _negated=True),
                        ("article_information__isnull", True),
                    ),
                    models.Q(("article_information__isnull", False), ("type", "A")),
                    _connector="OR",
                ),
                name="Article has required information",
            ),
        ),
        migrations.AddConstraint(
            model_name="bibliography",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        models.Q(("type", "S"), _negated=True),
                        ("software_information__isnull", True),
                    ),
                    models.Q(("software_information__isnull", False), ("type", "S")),
                    _connector="OR",
                ),
                name="Software has required information",
            ),
        ),
        migrations.AddConstraint(
            model_name="bibliography",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        models.Q(("type", "C"), _negated=True),
                        models.Q(("type", "P"), _negated=True),
                        ("conference_information__isnull", True),
                    ),
                    models.Q(("conference_information__isnull", False), ("type", "C")),
                    _connector="OR",
                ),
                name="Conference has required information",
            ),
        ),
        migrations.AddConstraint(
            model_name="bibliography",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        models.Q(("type", "P"), _negated=True),
                        ("poster_information__isnull", True),
                    ),
                    models.Q(("poster_information__isnull", False), ("type", "P")),
                    _connector="OR",
                ),
                name="Poster has required information",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="author",
            unique_together={("order", "bibliography")},
        ),
    ]
