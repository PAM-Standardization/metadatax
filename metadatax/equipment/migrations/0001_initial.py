# Generated by Django 3.2.25 on 2025-06-25 09:05

import datetime

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("common", "0001_initial"),
        ("ontology", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="AcousticDetectorSpecification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("min_frequency", models.IntegerField(blank=True, null=True)),
                ("max_frequency", models.IntegerField(blank=True, null=True)),
                (
                    "algorithm_name",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "detected_labels",
                    models.ManyToManyField(
                        related_name="acoustic_detectors", to="ontology.Label"
                    ),
                ),
            ],
            options={"db_table": "metadatax_equipment_acousticdetectorspecification"},
        ),
        migrations.CreateModel(
            name="Equipment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("model", models.CharField(max_length=100)),
                ("serial_number", models.CharField(max_length=100)),
                ("purchase_date", models.DateField(blank=True, null=True)),
                ("name", models.CharField(max_length=100, blank=True, null=True)),
                ("battery_slots_count", models.IntegerField(blank=True, null=True)),
                (
                    "battery_type",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("cables", models.TextField(blank=True, null=True)),
                (
                    "acoustic_detector_specification",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="equipment.acousticdetectorspecification",
                    ),
                ),
            ],
            options={"db_table": "metadatax_equipment_equipment"},
        ),
        migrations.CreateModel(
            name="HydrophoneSpecification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("sensitivity", models.FloatField()),
                (
                    "directivity",
                    models.TextField(
                        blank=True,
                        choices=[
                            ("OMNI", "Omni-directional"),
                            ("BI", "Bi-directional"),
                            ("UNI", "Uni-directional"),
                            ("CAR", "Cardioid"),
                            ("SCAR", "Supercardioid"),
                        ],
                        help_text="Directivity of the hydrophone",
                        null=True,
                    ),
                ),
                (
                    "operating_min_temperature",
                    models.FloatField(
                        blank=True,
                        help_text="Minimal temperature where the hydrophone operates (in degree Celsius)",
                        null=True,
                    ),
                ),
                (
                    "operating_max_temperature",
                    models.FloatField(
                        blank=True,
                        help_text="Maximal temperature where the hydrophone operates (in degree Celsius)",
                        null=True,
                    ),
                ),
                (
                    "min_bandwidth",
                    models.FloatField(
                        blank=True,
                        help_text="Lower limiting frequency for a more or less flat response of the hydrophone, pre-amplification included if applicable.",
                        null=True,
                    ),
                ),
                (
                    "max_bandwidth",
                    models.FloatField(
                        blank=True,
                        help_text="Upper limiting frequency within a more or less flat response of the hydrophone, pre-amplification included if applicable.",
                        null=True,
                    ),
                ),
                (
                    "min_dynamic_range",
                    models.FloatField(
                        blank=True,
                        help_text="Lowest level which the hydrophone can handle (dB SPL RMS or peak), pre-amplification included if applicable.",
                        null=True,
                    ),
                ),
                (
                    "max_dynamic_range",
                    models.FloatField(
                        blank=True,
                        help_text="Highest level which the hydrophone can handle (dB SPL RMS or peak), pre-amplification included if applicable.",
                        null=True,
                    ),
                ),
                (
                    "min_operating_depth",
                    models.FloatField(
                        blank=True,
                        help_text="Minimum depth at which hydrophone operates (in positive meters).",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "max_operating_depth",
                    models.FloatField(
                        blank=True,
                        help_text="Maximum depth at which hydrophone operates (in positive meters).",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "noise_floor",
                    models.FloatField(
                        blank=True,
                        help_text="Self noise of the hydrophone (dB re 1ÂµPa^2/Hz), pre-amplification included if applicable.<br>Average on bandwidth or a fix frequency (generally @5kHz for example). Possibility to 'below sea-state zero' (equivalent to around 30dB @5kHz) could be nice because it is often described like that.",
                        null=True,
                    ),
                ),
            ],
            options={"db_table": "metadatax_equipment_hydrophonespecification"},
        ),
        migrations.CreateModel(
            name="MaintenanceType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("interval", models.DurationField(blank=True, null=True)),
            ],
            options={"db_table": "metadatax_equipment_maintenancetype"},
        ),
        migrations.CreateModel(
            name="PlatformType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("is_mobile", models.BooleanField(default=False)),
            ],
            options={"db_table": "metadatax_equipment_platformtype"},
        ),
        migrations.CreateModel(
            name="RecorderSpecification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "channels_count",
                    models.IntegerField(
                        blank=True,
                        help_text="Number of all the channels on the recorder, even if unused.",
                        null=True,
                    ),
                ),
                ("sd_slots_count", models.IntegerField(blank=True, null=True)),
                (
                    "sd_maximum_capacity",
                    models.IntegerField(blank=True, help_text="In byte", null=True),
                ),
                ("sd_type", models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={"db_table": "metadatax_equipment_recorderspecification"},
        ),
        migrations.CreateModel(
            name="SDCardSpecification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("capacity", models.IntegerField(help_text="in byte")),
            ],
            options={"db_table": "metadatax_equipment_sdcardspecification"},
        ),
        migrations.CreateModel(
            name="Platform",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="owned_platforms",
                        to="common.institution",
                    ),
                ),
                (
                    "provider",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="provided_platforms",
                        to="common.institution",
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="platforms",
                        to="equipment.platformtype",
                    ),
                ),
            ],
            options={
                "unique_together": {("owner", "provider", "type", "name")},
                "db_table": "metadatax_equipment_platform",
            },
        ),
        migrations.CreateModel(
            name="Maintenance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(default=datetime.date.today)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "equipment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="maintenances",
                        to="equipment.equipment",
                    ),
                ),
                (
                    "maintainer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="performed_maintenances",
                        to="common.contact",
                    ),
                ),
                (
                    "platform",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="maintenances",
                        to="equipment.platform",
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="maintenances",
                        to="equipment.maintenancetype",
                    ),
                ),
            ],
            options={"db_table": "metadatax_equipment_maintenance"},
        ),
        migrations.AddField(
            model_name="equipment",
            name="hydrophone_specification",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="equipment.hydrophonespecification",
            ),
        ),
        migrations.AddField(
            model_name="equipment",
            name="owner",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="owned_equipments",
                to="common.institution",
            ),
        ),
        migrations.AddField(
            model_name="equipment",
            name="provider",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="provided_equipments",
                to="common.institution",
            ),
        ),
        migrations.AddField(
            model_name="equipment",
            name="recorder_specification",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="equipment.recorderspecification",
            ),
        ),
        migrations.AddField(
            model_name="equipment",
            name="sd_card_specification",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="equipment.sdcardspecification",
            ),
        ),
        migrations.AddConstraint(
            model_name="maintenance",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("equipment__isnull", True), ("platform__isnull", False)),
                    models.Q(("equipment__isnull", False), ("platform__isnull", True)),
                    _connector="OR",
                ),
                name="maintenance_concern_platform_or_equipment",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="maintenance",
            unique_together={("type", "date", "platform", "equipment")},
        ),
        migrations.AddConstraint(
            model_name="equipment",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("acoustic_detector_specification__isnull", True),
                        ("hydrophone_specification__isnull", True),
                        ("recorder_specification__isnull", True),
                        ("sd_card_specification__isnull", False),
                    ),
                    ("sd_card_specification__isnull", True),
                    _connector="OR",
                ),
                name="sd_card_is_only_sd_card",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="equipment",
            unique_together={("model", "serial_number")},
        ),
    ]
